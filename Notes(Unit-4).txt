UNIT-4

1) Delegate
	- Delegate in a C# is a powerful concept that allows method to be passed as parameters, stored in variables and called dynamically
	- Delegate is a type safe function pointer that holds the method reference in an object.
	- The reference of method in delegate changed dynamically.
	- It enforces type safety: meaning only methods with same signature can be store.

	USE:
	   - Delegate helps in code optimization 
	   - Delegate can be used to call method asynchronously
	   - It encapsulate  method call from caller
	   - Efficient use of delegate improve the performance of application
	   - Event Handiling
	
	SYNTAX:
	<access_modifier> delegate <return_type_of_delegate> <delegate_name> (<parameter>);

	TYPES of Delegate:
	There are two types of delegate. They are:
		1) Single Cast Delegate
		2) Multi Cast Delegate

	i) Single Cast Delegate:
		It holds or points the reference of single method at a time
		It is inherited from System.Delegate Class

		Step to perform delegate in our application
		1) Define method
		2) Define Delegate
		3) create instance of Delegate
		4) call or invoke method via delegate

	ii) Multi Cast Delegate:
		When delegate wrapped with the reference of more than one method, then this delegate is know as multicast delegate
		Multicast delegates points or holds the reference of multiple method at a time
		Multicast delegate is inherited from System.MulticastDelegate
		We have to use + or += operator to bind reference of multiple method in delegate and use - or -= to remove reference of method from delegate


2) Inline Method
	- An inline method is any method that is directly defined at the point of use instead of creating a named method separately. It is mainly used with delegates, events and LINQ

	There are two ways to represent inline method:
		- Anonymous Method
		- Lambda Expression

	i) Anonymous Method
		- Anonymous Method provides the technique to pass block of code i.e. method definition as delegate parameter.
		- Anonymous Method is a method without a name, but having body and declared when create instance of delegate using delegate keyword.

	SYNTAX:
	<delegate_type> <variable_name> = delegate(parameters) {
		//method name
	}

	ii) Lambda Expression
		- Lambda is shorter, cleaner way to write anonymous methods using the => (lambda operator).
		- Lambda Expression is composed of function parameter, lambda operator(=>) and expression or sequence statement
	SYNTAX:
		(<parameters>) => expression;

	There are two type of lambda expression:
	i) Expression Lambda
		It contains only single line expression
		eg: (<parameters>) => expression;

	ii) Statement Lambda
		It contains sequences of statement enclosed with {} braces
		eg: (<parameters>) => {statements};


3) Generic Delegate
	-> A generic delegate is a predefined delegate that can work with any data type, because it uses generics <T>. It saves us from writing new delegate definitions each time.

	There are three types of generic delegate define in System namespace:
		i) Func delegate
		ii) Action delegate
		iii) Predicate delegate


	i) Func Delegate
		- Func delegate represents zero, one or more input parameter and only one return output value method.
		SYNTAX:	Func<in t1, in t2 ..., in t16, out tres>();
	
	ii) Action Delegate 
		- Action delegate represents zero, one or more input parameter and nothing to return method.
		SYNTAX: Action<in T1, in T2 ..., in T16>();

	iii) Predicate Delegate
		- Predicate delegate is used to check certain codition for a input parameter and return Boolean value method
		SYNTAX: Predicate <in T>();

4) Event and Event Handling
	An event is a way for one object (publisher) to notify other objects(subscribers) that something has happened. Eg: Clicking on button, scrolling window, mouse click, mouse move, key type, system generated notification etc

	Event handling is a mechanism to generate response when event occurs.
	In c#, delegation event model is used to handle event.

	Delegation event model includes Publisher and Subscriber
	Publisher-> It is responsible to generate event, Publisher class contains the event and delegate
	Subscriber -> It is responsible to respond when publisher publish event. Subscriber class contain method where response is created.

	BASIC SYNTAX/ FLOW:
	//step-1 Define a delegate
	public delegate void <delegate_name>(<parameters>);

	//step-2 Define event in publisher
	public event <delegate_name> <delegate_object_name>;

	//step-3 Raise the event
	if(<delegate_object_name> != null) 
		<delegate_object_name>.Invoke(); //Triggerign the event
	
	//Step-4 In subscriber, define method and subscribe
	publisher.<delegate_object_name> += <response_event_method>; 

5) Exception and Exception Handiling
	
	Exception is a problem that arises during execution of program(Runtime Error) that disrupts the normal flow of a program
	It can occurs due to:
		- Wrong Supplied Input
		- Wrong implementation of logic
		- Insufficient supply resource
	If we don't handle exception, the program will crash and show ugly error message.

	In c#, exception are handled by using 5 keywords:
	- try
	- catch
	- throw
	- throws
	- finally

	SYNTAX:
	try {
		//code that might throw an exception
	} catch(ExceptionType1 ex) {
		// Exception handle code for type1
	} catch(ExceptionType2 ex){
		// Exception handle code for type2
	} 
	.
	.
	.
	catch(ExceptionTypen ex) {
		// Exception handle code for typen
	} finally {
		// Optional Code that always runs, even if an error occurs
	}

	NESTED TRY CATCH:
	A nested try--catch means putting one try..catch inside another. This is useful when you want to handle different parts of code separately and exception inside an inner block shouldn't crash the entire outer block

	SYNTAX:
	try
	{
    		// Outer try block

    		try
    		{
        		// Inner try block
    		}
    		catch (ExceptionType1 e)
    		{
        		// Handle inner exception
    		}
	}
	catch (ExceptionType2 e)
	{
    		// Handle outer exception
	}



	TYPES OF EXCEPTION:
	There are generally two types of exception:
	i) System Exception --> These are predefined exceptions that are part of the .NET System namespaces. They represent error caused by the runtime system -- like dividing by zero, null references, out of range issues and many more
	Common System Exception are:
		a) DivideByZeroException
		b) IndexOutOfRangeException
		c) FormatException
		d) NullReferenceException
		e) IOException	
			-FileNotFoundException
			-ClassNotFoundException
			-StackOverflowException
	ii) Application Exception(User Defined Exception) --> These are custom exceptions created by developers to represent business logic or application-specific errors.
	Steps to create user-defined Exceptions:
		a) first create user-defined exception by extending ApplicationException class
		i.e
		public class <custom_exception_name> : ApplicationException {
			public <custom_exceptio_name>(string msg) : base(msg){}
		}
		
		b) Use 'throw' keyword in try block if user defined exception occur.
		i.e.
		throw new <custom_exception_name>(msg);

6) LINQ(Language INtegrated Query)
	- LINQ is a uniform programming language model provided by .NET framework to enable query from various data sources such as collection object, SQL database, XML documents, entity framework, ADO.NET dataset, web services and other objects like Generic and collection. 

**Check out image on GitHub (LINQ_Images folder (linq-query-on-different-data-source)) for detail understanding

	- LINQ is strongly typed and checked at compile time
	- Data represent in LINQ as sequence and elements
	for ex: 
		string [] names = {"hari","shyam","milan"}
		here: names == sequence
		      hari, shyam, milan == elements

**Check out image on GitHub (LINQ_Images folder (internal-linq-process)) for detail understanding

	Query Expression - Query Expression is a query expressed in query syntax that contains set of clause written in declarative syntax like sql, xquery etc
	SYNTAX:
		from <identifier> in <datasource>
		where <predicate> [optional]
		select <identifier> [or groupBy]

	In IEnumerable<T>, all the data is fetched from the data source first, and then the filtering happens in the application (in memory) which is in System.Collections.Generic namespace.
	In IQueryable<T>, the filtering happens at the data source level (e.g., in SQL Server), and only the filtered result is fetched into the application which is in System.linq namespace.

**Check out image on GitHub (LINQ_Images folder (IEumerable-IQueryable)) for detail understanding

	
	LINQ Method: LINQ Method syntax uses extension method. The compiler converts query syntax into method syntax at compiler time.
	
	SYNTAX:
	var result = list.where(num => num % 2 != 0)

	Standard LINQ Operator: 
	A set of extension method forming query pattern is known as standard LINQ operator.

	Classification		Standard LINQ operator
	filter			Where, OfType<T>
	sorting			OrderBy,OrderByDescending, ThenBy, ThenyBy, Descending, Reverse
	Aggregation		Aggregate, Min, Max, Count, Average, Sum
	Quantifier		All, Any, Contains
	Set			Union, Intersect, Distinct, Except
	Grouping		GroupBy, ToLookUp
	Elements 		ElementAt, ElementAtOrDefault, First, FirstOrDefault, Last, LastOrDefault,Single, SingleOrDefault
	Project			Select, SelectMany
	Concatenation		Concat
	Particularing		Skip, SkipWhile, Take, TakeWhile
	Equality		SequenceEqual
	Generation		Empty, Range, Repeat, DefaultEmpty
	Conversion		Cast, ToArray, ToDictionary, ToList
	Joining 		GroupJoin, Join
